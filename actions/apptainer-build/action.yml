---
# action.yml
name: 'Scibuilder apptainer build'
description: 'Run Scibuilder Apptainer build'
inputs:
  install-folder:
    description: 'Installation prefix'
    required: true
  module-folder:
    description: 'Modulefile prefix'
    required: true
  definitions-folder:
    description: 'Folder of definitions'
    required: true
  hash-length:
    description: 'Hash length for installations'
    default: 7
  version-separator:
    description: 'Character that separates the name of the module from the version in the name field'
    default: '_'
  lmod-dir:
    description: 'Directory where Lmod is installed. Set to LMOD_DIR in interactive shells.'
    default: '/usr/share/lmod/lmod/libexec'
  lmod-module-template:
    description: 'Default module template to be used in place of the intrinsic default'
    default: ''
  lmod-replace-name:
    description: 'String that will be replaced with the name in custom modules'
    default: '__name__'
  lmod-replace-version:
    description: 'String that will be replaced with the version in custom modules'
    default: '__version__'
  lmod-replace-image:
    description: 'String that will be replaced with the image name in custom modules'
    default: '__image__'
runs:
  using: 'composite'
  steps:
  - name: Create images
    shell: bash
    env:
      SPACK_CUSTOMIZATIONS: ${{ inputs.customizations }}
    run: |
      # Set global vars
      export MAIN_DIR=`pwd`
      SEP=${{ inputs.version-separator }}

      echo "::group::Install apptainer to /apptainer"
      mkdir -p /apptainer
      if [[ ! -f /apptainer/bin/apptainer ]]
      then
        curl -s https://raw.githubusercontent.com/apptainer/apptainer/main/tools/install-unprivileged.sh | \
        bash -s - /apptainer
      fi
      SYSTEM_APPTAINER=$(command -v apptainer) || true
      echo "::endgroup::"

      echo "::group::Create sha256 checksums from definition files"
      for DEF_FILE in `find "${{ inputs.definitions-folder }}" -regex '.*\.def'`
      do
        DEF_FILE_DIR=`dirname $DEF_FILE`
        DEF_FILE_NAME=`basename $DEF_FILE`
        echo "Processing ${DEF_FILE_NAME}"

        cd $DEF_FILE_DIR

        sha256sum $DEF_FILE_NAME > $DEF_FILE_NAME.sha256sum

        cd $MAIN_DIR
      done
      echo "::endgroup::"

      echo "::group::Setting cache directory configuration"
      echo 'Configuring apptainer to use /cache/apptainer for $APPTAINER_CACHEDIR'
      mkdir -p /cache/apptainer
      export APPTAINER_CACHEDIR=/cache/apptainer
      echo "::endgroup::"

      echo "::group::Creating installation folders"
      mkdir -p "${{ inputs.install-folder }}"
      echo "::endgroup::"

      for DEF_FILE in `find "${{ inputs.definitions-folder }}" -regex '.*\.def'`
      do
        DEF_FILE_NAME=`basename $DEF_FILE`
        echo "::group::Creating image from ${DEF_FILE_NAME}"

        DEF_BASENAME="${DEF_FILE_NAME/.def/}"
        NAME=`echo ${DEF_BASENAME} | cut -f 1 -d "${SEP}"`
        VERSION=`echo ${DEF_BASENAME} | cut -f 2 -d "${SEP}"`
        if [[ "$NAME" == "$VERSION" ]]
        then
          echo "Cannot determine version from definition file: ${DEF_FILE_NAME}"
          echo "Expected definition file name to be in format: NAME${SEP}VERSION.def"
          exit 1
        fi
        HASH_SHORT=`head -c ${{ inputs.hash-length }} $DEF_FILE.sha256sum`
        INSTALL_FOLDER="${{ inputs.install-folder }}/${NAME}/${VERSION}"
        IMAGE_PATH="${INSTALL_FOLDER}/${DEF_BASENAME}-${HASH_SHORT}.sif"
        IMAGE_DEF="${INSTALL_FOLDER}/${DEF_BASENAME}-${HASH_SHORT}.def"

        if [[ "${INSTALL_FOLDER}" =~ ' ' ]]
        then
          echo "Installation folder should not contain spaces: \"${INSTALL_FOLDER}\""
          exit 1
        fi

        if [[ "${IMAGE_PATH}" =~ ' ' ]]
        then
          echo "Image name should not contain spaces: \"${IMAGE_PATH}\""
          exit 1
        fi

        INSTALL_IMAGE=0
        if [[ -d "${INSTALL_FOLDER}" ]]
        then
          if [[ -f "${IMAGE_DEF}" ]]
          then
            diff -q ${IMAGE_DEF} ${DEF_FILE} &> /dev/null
            DIFF_RESULT=$?
            if [[ $DIFF_RESULT -eq 0 ]]
            then
              echo "Definition ${NAME}/${VERSION} already exists in ${INSTALL_FOLDER}"
              INSTALL_IMAGE=1
            else
              echo "Definition ${NAME}/${VERSION} already exists in ${INSTALL_FOLDER}, but the definition file does not match the one given."
              sleep 1
              exit 1
            fi
          fi
        fi

        if [[ "${INSTALL_IMAGE}" -eq 0 ]]
        then
          echo "Installing ${NAME}/${VERSION} to ${INSTALL_FOLDER}"

          BUILD_RESULT=1
          mkdir -p ${INSTALL_FOLDER}
          if [[ "${SYSTEM_APPTAINER}" != '' ]]
          then
            echo "Apptainer exists in build image. Trying installation with system apptainer."
            ${SYSTEM_APPTAINER} build ${IMAGE_PATH} ${DEF_FILE} || BUILD_RESULT=$?
          fi
          if [[ $BUILD_RESULT -ne 0 ]]
          then
            echo "Trying installation with unprivileged apptainer."
            /apptainer/bin/apptainer build ${IMAGE_PATH} ${DEF_FILE}
          fi
        fi
        echo "::endgroup::"

        echo "::group::Installing lmod module for ${NAME}/${VERSION}"
        MODULE_FOLDER="${{ inputs.module-folder }}/${NAME}"

        mkdir -p $MODULE_FOLDER

        CUSTOM_MODULE_NAME=${DEF_FILE/.def/.lua}
        DEFAULT_MODULE_TEMPLATE=${{ inputs.lmod-module-template }}

        if [[ -f "${CUSTOM_MODULE_NAME}" ]]
        then
          echo "Creating modulefile for image ${NAME}/${VERSION} from custom module file"
          cp ${CUSTOM_MODULE_NAME} ${MODULE_FOLDER}/${VERSION}.lua
          sed -i "s:${{ inputs.lmod-replace-name }}:${NAME}:g" ${MODULE_FOLDER}/${VERSION}.lua
          sed -i "s:${{ inputs.lmod-replace-version }}:${VERSION}:g" ${MODULE_FOLDER}/${VERSION}.lua
          sed -i "s:${{ inputs.lmod-replace-image }}:${IMAGE_PATH}:g" ${MODULE_FOLDER}/${VERSION}.lua
        elif [[ -f "${DEFAULT_MODULE_TEMPLATE}" ]]
        then
          echo "Creating modulefile for image ${NAME}/${VERSION} from default module file"
          cp ${DEFAULT_MODULE_TEMPLATE} ${MODULE_FOLDER}/${VERSION}.lua
          sed -i "s:${{ inputs.lmod-replace-name }}:${NAME}:g" ${MODULE_FOLDER}/${VERSION}.lua
          sed -i "s:${{ inputs.lmod-replace-version }}:${VERSION}:g" ${MODULE_FOLDER}/${VERSION}.lua
          sed -i "s:${{ inputs.lmod-replace-image }}:${IMAGE_PATH}:g" ${MODULE_FOLDER}/${VERSION}.lua
        else
          echo "Creating modulefile for definition ${NAME}/${VERSION}"
          cat << EOF > ${MODULE_FOLDER}/${VERSION}.lua
      -- -*- lua -*-"
      --
      -- Module file created by scibuilder
      --

      whatis([[Name : ${NAME}]])
      whatis([[Version : ${VERSION}]])
      help([[This is an automatically created Apptainer image.]])

      family("apptainer")

      if mode() == "load" then
        LmodMessage("Environment variable set \$[IMAGE_PATH} points to image ${NAME}/${VERSION}")
      end

      setenv("IMAGE_PATH", "${IMAGE_PATH}")
      EOF
        fi
        echo "::endgroup::"

        echo "::group::Verifying module directory"
        ${{ inputs.lmod-dir }}/check_module_tree_syntax ${{ inputs.module-folder }}
        echo "::endgroup::"

        echo "Copying definition file and checksum to ${INSTALL_FOLDER}"
        cp $DEF_FILE ${IMAGE_DEF}
        cp $DEF_FILE.sha256sum ${IMAGE_DEF}.sha256sum
        echo "::endgroup::"

      done
