---
# action.yml
name: 'Spack clone repo'
description: 'Clone spack repository'
inputs:
  spack-location:
    description: 'Location where repository will be cloned into'
    default: /spack
  spack-repository:
    description: 'Spack repository to use'
    default: 'https://github.com/spack/spack.git'
  spack-version:
    description: 'Spack version'
    default: origin/develop
  zip-download:
    description: 'Download zipped release'
    default: ''
  cache-location:
    description: 'Location where additional cache will be located'
    default: /cache
runs:
  using: 'composite'
  steps:
  - name: Clone spack repository
    shell: bash
    run: |

      CACHE_DIR=${{ inputs.cache-location }}/spack/releases
      mkdir -p $CACHE_DIR

      SPACK_LOCATION=${{ inputs.spack-location }}
      mkdir -p ${SPACK_LOCATION}

      SPACK_VERSION=${{ inputs.spack-version }}
      SPACK_REPO=${{ inputs.spack-repository }}

      echo "::group::Clone spack repository"
      ZIP_DOWNLOAD="${{ inputs.zip-download }}"
      echo "$ZIP_DOWNLOAD"
      if [[ ! -z "$ZIP_DOWNLOAD" ]]
      then
        cd ${SPACK_LOCATION}
        SPACK_RELEASE_DIR=spack-${SPACK_VERSION#v}
        if [[ ! -d "$SPACK_RELEASE_DIR" ]]
        then
          SPACK_ZIP=$CACHE_DIR/${SPACK_VERSION}.zip
          SPACK_ZIP_URL=${SPACK_REPO%.git}/archive/refs/tags/${SPACK_VERSION}.zip
          if [[ ! -f $SPACK_ZIP ]]
          then
            curl --output $SPACK_ZIP -L $SPACK_ZIP_URL
          fi
          unzip $SPACK_ZIP
          echo $SPACK_RELEASE_DIR
          mv $SPACK_RELEASE_DIR/* .
        fi
      else
        bash -c "[[ -d ${SPACK_LOCATION}/.git ]] && ( cd ${SPACK_LOCATION} && git reset --hard ${SPACK_VERSION} )  || ( cd ${SPACK_LOCATION} && git init && git remote add origin ${SPACK_REPO} && git fetch --tags origin && git checkout ${SPACK_VERSION} )"
      fi
      echo "::endgroup::"
